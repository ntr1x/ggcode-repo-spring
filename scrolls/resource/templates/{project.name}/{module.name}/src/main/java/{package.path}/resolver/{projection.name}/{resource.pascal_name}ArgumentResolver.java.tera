package {{package.name}}.resolver.{{projection.name}};

import {{package.name}}.request.{{projection.name}}.{{resource.pascal_name}}Request;
import org.ntr1x.common.web.component.AppArgumentResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.core.MethodParameter;
import org.springframework.core.convert.ConversionService;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.security.Principal;

@Component
public class {{resource.pascal_name}}ArgumentResolver implements AppArgumentResolver {

    @Autowired @Lazy
    private ConversionService conversionService;

    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        return {{resource.pascal_name}}Request.Context.class.equals(parameter.getParameterType());
    }

    @Override
    public {{resource.pascal_name}}Request.Context resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        Principal principal = webRequest.getUserPrincipal();

        if (principal instanceof JwtAuthenticationToken token) {
            Jwt jwt = token.getToken();

            return {{resource.pascal_name}}Request.Context
                    .builder()
                    {%- if projection.context.array | length > 0 -%}
                    {%- for desc in projection.context.array %}
                    .{{desc.column.camel_name}}(conversionService.convert(jwt.getClaim("{{desc.claim}}"), {{desc.java_type}}.class))
                    {%- endfor -%}
                    {%- endif %}
                    .build();
        }
        return null;
    }
}
