package {{package.name}}.request.{{projection.name}};

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springdoc.core.annotations.ParameterObject;

import java.util.Optional;

public interface {{resource.pascal_name}}Request {
    @Data
    @Builder(toBuilder = true)
    @NoArgsConstructor
    @AllArgsConstructor
    @Schema(name = "{{resource.pascal_name}}RequestId")
    class Id {
        {%- for desc in entity.keys %}
        {# Blank line #}
        private {{desc.java_type}} {{desc.camel_name}};
        {%- endfor %}
    }

    @Data
    @Builder(toBuilder = true)
    @AllArgsConstructor
    @Schema(name = "{{resource.pascal_name}}RequestContext")
    class Context {
        {%- if projection.context.array | length > 0 -%}
        {%- for desc in projection.context.array %}
        {# Blank line #}
        private {{desc.java_type}} {{desc.camel_name}};
        {%- endfor -%}
        {%- endif %}
    }

    @Data
    @Builder(toBuilder = true)
    @NoArgsConstructor
    @AllArgsConstructor
    @Schema(name = "{{resource.pascal_name}}RequestCreate")
    class Create {
      {%- for desc in entity.columns %}
      {%- if projection.context.by_name is not containing(desc.name) %}
      {# Blank line #}
      private Optional<{{desc.java_type}}> {{desc.camel_name}};
      {%- endif -%}
      {%- endfor %}
    }

    @Data
    @Builder(toBuilder = true)
    @NoArgsConstructor
    @AllArgsConstructor
    @Schema(name = "{{resource.pascal_name}}RequestPut")
    class Put {
        {%- for desc in entity.keys %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        {# Blank line #}
        private Optional<{{desc.java_type}}> {{desc.camel_name}};
        {%- endif -%}
        {%- endfor %}

        {%- for desc in entity.columns %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        {# Blank line #}
        private Optional<{{desc.java_type}}> {{desc.camel_name}};
        {%- endif -%}
        {%- endfor %}
    }

    @Data
    @Builder(toBuilder = true)
    @NoArgsConstructor
    @AllArgsConstructor
    @Schema(name = "{{resource.pascal_name}}RequestSelect")
    class Select {
        {%- for desc in entity.keys %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        {# Blank line #}
        private Optional<{{desc.java_type}}> {{desc.camel_name}};
        {%- endif -%}
        {%- endfor %}

        {%- for desc in entity.columns %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        {# Blank line #}
        private Optional<{{desc.java_type}}> {{desc.camel_name}};
        {%- endif -%}
        {%- endfor %}
    }

    @Data
    @Builder(toBuilder = true)
    @NoArgsConstructor
    @AllArgsConstructor
    @Schema(name = "{{resource.pascal_name}}RequestUpdate")
    class Update {
        {%- for desc in entity.keys %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        {# Blank line #}
        private {{desc.java_type}} {{desc.camel_name}};
        {%- endif -%}
        {%- endfor %}

        {%- for desc in entity.columns %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        {# Blank line #}
        private Optional<{{desc.java_type}}> {{desc.camel_name}};
        {%- endif -%}
        {%- endfor %}
    }
}
