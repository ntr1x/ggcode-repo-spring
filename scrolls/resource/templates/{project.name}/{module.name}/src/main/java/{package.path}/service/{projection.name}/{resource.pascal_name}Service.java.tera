package {{package.name}}.service.{{projection.name}};

import jakarta.transaction.Transactional;

import lombok.RequiredArgsConstructor;
import org.ntr1x.common.api.annotation.Event;
import org.ntr1x.common.api.service.EvaluatorService;
import org.ntr1x.common.api.service.GeneratorService;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.stereotype.Service;

import {{package.name}}.entity.{{unit.pascal_name}}Entity;
import {{package.name}}.repository.{{unit.pascal_name}}Repository;
import {{package.name}}.model.{{projection.name}}.{{resource.pascal_name}}Model;
import {{package.name}}.request.{{projection.name}}.{{resource.pascal_name}}Request;
import {{package.name}}.response.{{projection.name}}.{{resource.pascal_name}}Response;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class {{resource.pascal_name}}Service {

    private final {{unit.pascal_name}}Repository {{unit.camel_name}}Repository;
    private final ConversionService conversionService;
    private final EvaluatorService evaluatorService;
    private final GeneratorService generatorService;

    {%- if projection.actions.by_method.create %}
    {# Blank Line #}
    @Transactional
    {%- for signal in signals.create | default(value = []) %}
    @Event(topic = "{{signal.topic}}", type = "{{signal.event_type}}", source = "service:{{module.name}}"{% if signal.payload_el is defined %}, payloadEl = "{{signal.payload_el}}"{% endif %}{% if signal.condition_el is defined %}, conditionEl = "{{signal.condition_el}}"{% endif %})
    {%- endfor %}
    public {{resource.pascal_name}}Response.Create create(
        {{resource.pascal_name}}Request.Context context,
        {{resource.pascal_name}}Request.Create request
    ) {
        {{unit.pascal_name}}Entity.{{unit.pascal_name}}EntityBuilder builder = {{unit.pascal_name}}Entity.builder();
        {# Blank line -#}
        {% for desc in requests.create.keys.array %}
        {%- if desc is containing('override') and desc.override is containing('value') %}
        builder.{{desc.camel_name}}({{desc.override.value}});
        {%- elif desc is containing('override') and desc.override is containing('context_value') %}
        builder.{{desc.camel_name}}(context.get{{desc.override.context_value.pascal_name}}());
        {%- elif desc is containing('override') and desc.override is containing('expression') %}
        builder.{{desc.camel_name}}(evaluatorService.evaluate("{{desc.override.expression}}", {{desc.java_type}}.class));
        {%- elif desc is containing('override') and desc.override.is_hidden %}
        {#- Ignore -#}
        {%- else %}
        Optional.ofNullable(request.get{{desc.pascal_name}}())
                .ifPresent((value) -> builder.{{desc.camel_name}}(value.orElse(null)));
        {%- endif -%}
        {%- endfor -%}
        {# Blank line #}
        {% for desc in requests.create.columns.array %}
        {%- if desc is containing('override') and desc.override is containing('value') %}
        builder.{{desc.camel_name}}({{desc.override.value}});
        {%- elif desc is containing('override') and desc.override is containing('context_value') %}
        builder.{{desc.camel_name}}(context.get{{desc.override.context_value.pascal_name}}());
        {%- elif desc is containing('override') and desc.override is containing('expression') %}
        builder.{{desc.camel_name}}(evaluatorService.evaluate("{{desc.override.expression}}", {{desc.java_type}}.class));
        {%- elif desc is containing('override') and desc.override.is_hidden %}
        {#- Ignore -#}
        {%- else %}
        Optional.ofNullable(request.get{{desc.pascal_name}}())
                .ifPresent((value) -> builder.{{desc.camel_name}}(value.orElse(null)));
        {%- endif -%}
        {%- endfor %}

        {{unit.pascal_name}}Entity entity = {{unit.camel_name}}Repository.saveAndFlush(builder.build());

        {{resource.pascal_name}}Model created = conversionService.convert(entity, {{resource.pascal_name}}Model.class);

        return {{resource.pascal_name}}Response.Create
            .builder()
            .created(created)
            .build();
    }
    {%- endif %}

    {%- if projection.actions.by_method.remove or projection.actions.by_method.delete %}
    {# Blank Line #}
    @Transactional
    {%- for signal in signals.remove | default(value = []) %}
    @Event(topic = "{{signal.topic}}", type = "{{signal.event_type}}", source = "service:{{module.name}}"{% if signal.payload_el is defined %}, payloadEl = "{{signal.payload_el}}"{% endif %}{% if signal.condition_el is defined %}, conditionEl = "{{signal.condition_el}}"{% endif %})
    {%- endfor %}
    public {{resource.pascal_name}}Response.Remove remove(
        {{resource.pascal_name}}Request.Context context,
        {{resource.pascal_name}}Request.Id key
    ) {
        {{unit.pascal_name}}Entity entity = {{unit.camel_name}}Repository
                .findById(key.getId())
                .orElseThrow();

        {{resource.pascal_name}}Model removed = conversionService.convert(entity, {{resource.pascal_name}}Model.class);

        {{unit.camel_name}}Repository.delete(entity);

        return {{resource.pascal_name}}Response.Remove
            .builder()
            .removed(removed)
            .build();
    }
    {%- endif %}

    {%- if projection.actions.by_method.update %}
    {# Blank Line #}
    @Transactional
    {%- for signal in signals.update | default(value = []) %}
    @Event(topic = "{{signal.topic}}", type = "{{signal.event_type}}", source = "service:{{module.name}}"{% if signal.payload_el is defined %}, payloadEl = "{{signal.payload_el}}"{% endif %}{% if signal.condition_el is defined %}, conditionEl = "{{signal.condition_el}}"{% endif %})
    {%- endfor %}
    public {{resource.pascal_name}}Response.Update update(
        {{resource.pascal_name}}Request.Context context,
        {{resource.pascal_name}}Request.Update request
    ) {
        {{unit.pascal_name}}Entity example = {{unit.pascal_name}}Entity
                .builder()
                {%- for desc in requests.update.keys.array %}
                {%- if desc is containing('override') and desc.override is containing('value') %}
                .{{desc.camel_name}}({{desc.override.value}})
                {%- elif desc is containing('override') and desc.override is containing('context_value') %}
                .{{desc.camel_name}}(context.get{{desc.override.context_value.pascal_name}}())
                {%- elif desc is containing('override') and desc.override is containing('expression') %}
                .{{desc.camel_name}}(evaluatorService.evaluate("{{desc.override.expression}}", {{desc.java_type}}.class))
                {%- elif desc is containing('override') and desc.override.is_hidden %}
                {#- Ignore -#}
                {%- else %}
                .{{desc.camel_name}}(request.get{{desc.pascal_name}}())
                {%- endif -%}
                {%- endfor %}
                {%- for f in requests.update.filters %}
                {%- if f is containing('value') %}
                .{{f.camel_name}}({{f.value}})
                {%- elif f is containing('expression') %}
                .{{f.camel_name}}(evaluatorService.evaluate("{{f.expression}}", {{desc.java_type}}.class))
                {%- elif f is containing('context_value') %}
                .{{f.camel_name}}(context.get{{f.context_value.pascal_name}}())
                {%- elif f is containing('request_value') %}
                .{{f.camel_name}}(request.get{{f.request_value.pascal_name}}().orElseThrow())
                {%- else %}
                {#- Ignore -#}
                {%- endif -%}
                {%- endfor %}
                .build();

        {{unit.pascal_name}}Entity entity = {{unit.camel_name}}Repository
                .findOne(Example.of(example))
                .orElseThrow();

        {{unit.pascal_name}}Entity.{{unit.pascal_name}}EntityBuilder builder = entity.toBuilder();
        {# Blank line -#}
        {% for desc in requests.update.columns.array %}
        {%- if desc is containing('override') and desc.override is containing('value') %}
        builder.{{desc.camel_name}}({{desc.override.value}});
        {%- elif desc is containing('override') and desc.override is containing('context_value') %}
        builder.{{desc.camel_name}}(context.get{{desc.override.context_value.pascal_name}}());
        {%- elif desc is containing('override') and desc.override is containing('expression') %}
        builder.{{desc.camel_name}}(evaluatorService.evaluate("{{desc.override.expression}}", {{desc.java_type}}.class));
        {%- elif desc is containing('override') and desc.override.is_hidden %}
        {#- Ignore -#}
        {%- else %}
        Optional.ofNullable(request.get{{desc.pascal_name}}())
                .ifPresent((value) -> builder.{{desc.camel_name}}(value.orElse(null)));
        {%- endif -%}
        {%- endfor %}

        entity = {{unit.camel_name}}Repository.saveAndFlush(builder.build());

        {{resource.pascal_name}}Model updated = conversionService.convert(entity, {{resource.pascal_name}}Model.class);

        return {{resource.pascal_name}}Response.Update
            .builder()
            .updated(updated)
            .build();
    }
    {%- endif %}

    {%- if projection.actions.by_method.replace %}
    {# Blank Line #}
    @Transactional
    {%- for signal in signals.replace | default(value = []) %}
    @Event(topic = "{{signal.topic}}", type = "{{signal.event_type}}", source = "service:{{module.name}}"{% if signal.payload_el is defined %}, payloadEl = "{{signal.payload_el}}"{% endif %}{% if signal.condition_el is defined %}, conditionEl = "{{signal.condition_el}}"{% endif %})
    {%- endfor %}
    public {{resource.pascal_name}}Response.Replace replace(
        {{resource.pascal_name}}Request.Context context,
        {{resource.pascal_name}}Request.Id key,
        {{resource.pascal_name}}Request.Replace request
    ) {
        {{unit.pascal_name}}Entity example = {{unit.pascal_name}}Entity
                .builder()
                {%- for desc in requests.replace.keys.array %}
                {%- if desc is containing('override') and desc.override is containing('value') %}
                .{{desc.camel_name}}({{desc.override.value}})
                {%- elif desc is containing('override') and desc.override is containing('context_value') %}
                .{{desc.camel_name}}(context.get{{desc.override.context_value.pascal_name}}())
                {%- elif desc is containing('override') and desc.override is containing('expression') %}
                .{{desc.camel_name}}(evaluatorService.evaluate("{{desc.override.expression}}", {{desc.java_type}}.class))
                {%- elif desc is containing('override') and desc.override.is_hidden %}
                {#- Ignore -#}
                {%- else %}
                .{{desc.camel_name}}(key.get{{desc.pascal_name}}())
                {%- endif -%}
                {%- endfor %}
                {%- for f in requests.replace.filters %}
                {%- if f is containing('value') %}
                .{{f.camel_name}}({{f.value}})
                {%- elif f is containing('expression') %}
                .{{f.camel_name}}(evaluatorService.evaluate("{{f.expression}}", {{desc.java_type}}.class))
                {%- elif f is containing('context_value') %}
                .{{f.camel_name}}(context.get{{f.context_value.pascal_name}}())
                {%- elif f is containing('request_value') %}
                .{{f.camel_name}}(request.get{{f.request_value.pascal_name}}().orElseThrow())
                {%- else %}
                {#- Ignore -#}
                {%- endif -%}
                {%- endfor %}
                .build();

        {{unit.pascal_name}}Entity entity = {{unit.camel_name}}Repository
                .findOne(Example.of(example))
                .orElseThrow();

        {{resource.pascal_name}}Model removed = conversionService.convert(entity, {{resource.pascal_name}}Model.class);

        {{unit.pascal_name}}Entity.{{unit.pascal_name}}EntityBuilder builder = entity.toBuilder();
        {# Blank line #}
        {%- for desc in entity.keys.array %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        Optional.ofNullable(request.get{{desc.pascal_name}}())
                .ifPresent((value) -> builder.{{desc.camel_name}}(value.orElse(null)));
        {%- endif -%}
        {%- endfor %}
        {%- for desc in entity.columns.array %}
        {%- if projection.context.by_name is not containing(desc.name) %}
        Optional.ofNullable(request.get{{desc.pascal_name}}())
                .ifPresent((value) -> builder.{{desc.camel_name}}(value.orElse(null)));
        {%- endif -%}
        {%- endfor %}

        entity = {{unit.camel_name}}Repository.saveAndFlush(builder.build());

        {{resource.pascal_name}}Model created = conversionService.convert(entity, {{resource.pascal_name}}Model.class);

        return {{resource.pascal_name}}Response.Replace
            .builder()
            .removed(removed)
            .created(created)
            .build();
    }
    {%- endif %}

    {%- if projection.actions.by_method.select %}
    {# Blank Line #}
    @Transactional
    public Page<{{resource.pascal_name}}Model> select(
        {{resource.pascal_name}}Request.Context context,
        {{resource.pascal_name}}Request.Select request,
        Pageable pageable
    ) {
        ExampleMatcher matcher = ExampleMatcher.matchingAll();

        {{unit.pascal_name}}Entity template = new {{unit.pascal_name}}Entity();
        {# Blank line -#}
        {% for desc in requests.select.keys.array %}
        {%- if desc is containing('override') and desc.override is containing('value') %}
        {# Blank line #}
        matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
        template.set{{desc.pascal_name}}({{desc.override.value}});
        {%- elif desc is containing('override') and desc.override is containing('context_value') %}
        {# Blank line #}
        matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
        template.set{{desc.pascal_name}}(context.get{{desc.override.context_value.pascal_name}}());
        {%- elif desc is containing('override') and desc.override is containing('expression') %}
        {# Blank line #}
        matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
        template.set{{desc.pascal_name}}(evaluatorService.evaluate("{{desc.override.expression}}", {{desc.java_type}}.class));
        {%- elif desc is containing('override') and desc.override.is_hidden %}
        {#- Ignore -#}
        {%- else %}
        {# Blank line #}
        Optional.ofNullable(request.get{{desc.pascal_name}}())
                .ifPresent(optional -> {
                    matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
                    template.set{{desc.pascal_name}}(optional.orElse(null));
                });
        {%- endif -%}
        {%- endfor %}
        {# Blank line -#}
        {% for desc in requests.select.columns.array %}
        {%- if desc is containing('override') and desc.override is containing('value') %}
        {# Blank line #}
        matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
        template.set{{desc.pascal_name}}({{desc.override.value}});
        {%- elif desc is containing('override') and desc.override is containing('context_value') %}
        {# Blank line #}
        matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
        template.set{{desc.pascal_name}}(context.get{{desc.override.context_value.pascal_name}}());
        {%- elif desc is containing('override') and desc.override is containing('expression') %}
        {# Blank line #}
        matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
        template.set{{desc.pascal_name}}(evaluatorService.evaluate("{{desc.override.expression}}", {{desc.java_type}}.class));
        {%- elif desc is containing('override') and desc.override.is_hidden %}
        {#- Ignore -#}
        {%- else %}
        {# Blank line #}
        Optional.ofNullable(request.get{{desc.pascal_name}}())
                .ifPresent(optional -> {
                    matcher.withMatcher("{{desc.camel_name}}", m -> m.exact());
                    template.set{{desc.pascal_name}}(optional.orElse(null));
                });
        {%- endif -%}
        {%- endfor %}

        Example<{{unit.pascal_name}}Entity> example = Example.of(template, matcher);

        return {{unit.camel_name}}Repository
                .findAll(example, pageable)
                .map(item -> conversionService.convert(item, {{resource.pascal_name}}Model.class));
    }
    {%- endif %}

    {%- if projection.actions.by_method.get %}
    {# Blank Line #}
    @Transactional
    public {{resource.pascal_name}}Model get(
        {{resource.pascal_name}}Request.Context context,
        {{resource.pascal_name}}Request.Id key
    ) {
        {{unit.pascal_name}}Entity entity = {{unit.camel_name}}Repository
                .findById(key.getId())
                .orElseThrow();
        {{resource.pascal_name}}Model result = conversionService.convert(entity, {{resource.pascal_name}}Model.class);
        return result;
    }
    {%- endif %}
}
