package {{package.name}}.controller;

import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;

import {{package.name}}.model.{{view.entity.pascal_name}}Model;
import {{package.name}}.model.{{view.entity.pascal_name}}ModelId;
import {{package.name}}.service.{{view.entity.pascal_name}}Service;
import {{package.name}}.request.{{view.entity.pascal_name}}CreateRequest;
import {{package.name}}.request.{{view.entity.pascal_name}}PutRequest;
import {{package.name}}.request.{{view.entity.pascal_name}}SelectRequest;
import {{package.name}}.request.{{view.entity.pascal_name}}UpdateRequest;

import org.springdoc.core.annotations.ParameterObject;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;

@RestController
@Tag(name = "{{view.entity.pascal_name}}")
@RequestMapping("/{{view.entity.snake_name}}")
@RequiredArgsConstructor
public class {{view.entity.pascal_name}}DefaultController {

    private final {{view.entity.pascal_name}}{{view.pascal_name}}Service {{view.entity.camel_name}}{{view.pascal_name}}Service;

    @PostMapping
    public {{view.entity.pascal_name}}Model create(
            @RequestBody {{view.entity.pascal_name}}CreateRequest request
    ) {
        return {{view.entity.camel_name}}Service.create(request);
    }

    @PostMapping("/remove")
    public {{entity.pascal_name}}Model remove(
            @RequestBody {{entity.pascal_name}}ModelId key
    ) {
        return {{entity.camel_name}}Service.remove(key);
    }

    @PutMapping("/update")
    public {{entity.pascal_name}}Model update(
            @RequestBody {{entity.pascal_name}}UpdateRequest request
    ) {
        return {{entity.camel_name}}Service.update(request);
    }

    @PostMapping("/select")
    public final Page<{{entity.pascal_name}}Model> select(
            @RequestBody {{entity.pascal_name}}SelectRequest request,
            @ParameterObject Pageable pageable
    ) {
        return {{entity.camel_name}}Service.select(request, pageable);
    }

    @DeleteMapping("/i/{% for desc in entity.keys %}{{'{' ~ desc.camel_name ~ '}'}}{% if not loop.last %}|{% endif %}{% endfor %}")
    public final {{entity.pascal_name}}Model remove(
        {%- for desc in entity.keys %}
            @RequestParam("{{desc.camel_name}}") {{desc.java_type}} {{desc.camel_name}}{% if not loop.last %},{% endif %}
        {%- endfor %}
    ) {
        {{entity.pascal_name}}ModelId recordKey = {{entity.pascal_name}}ModelId.builder()
                {%- for desc in entity.keys %}
                .{{desc.camel_name}}({{desc.camel_name}})
                {%- endfor %}
                .build();
        return {{entity.camel_name}}Service.remove(recordKey);
    }

    @PutMapping("/i/{% for desc in entity.keys %}{{'{' ~ desc.camel_name ~ '}'}}{% if not loop.last %}|{% endif %}{% endfor %}")
    public final {{entity.pascal_name}}Model update(
        {%- for desc in entity.keys %}
            @RequestParam("{{desc.camel_name}}") {{desc.java_type}} {{desc.camel_name}},
        {%- endfor %}
            @RequestBody {{entity.pascal_name}}PutRequest request
    ) {
        {{entity.pascal_name}}ModelId recordKey = {{entity.pascal_name}}ModelId.builder()
                {%- for desc in entity.keys %}
                .{{desc.camel_name}}({{desc.camel_name}})
                {%- endfor %}
                .build();
        return {{entity.camel_name}}Service.update(recordKey, request);
    }

    @GetMapping("/i/{% for desc in entity.keys %}{{'{' ~ desc.camel_name ~ '}'}}{% if not loop.last %}|{% endif %}{% endfor %}")
    public final {{entity.pascal_name}}Model get(
        {%- for desc in entity.keys %}
            @RequestParam("{{desc.camel_name}}") {{desc.java_type}} {{desc.camel_name}}{% if not loop.last %},{% endif %}
        {%- endfor %}
    ) {
        {{entity.pascal_name}}ModelId recordKey = {{entity.pascal_name}}ModelId.builder()
                {%- for desc in entity.keys %}
                .{{desc.camel_name}}({{desc.camel_name}})
                {%- endfor %}
                .build();
        return {{entity.camel_name}}Service.get(recordKey);
    }
}
